
import sys
import os
#return a list of topen
def sortgenefile(countfile, writefile):
  backup = sys.stdout
  with open(countfile) as mfile, open(writefile,'w') as fout:
    res=[]
    header =  ','.join(mfile.readline().rstrip().split())
    sys.stdout = fout
    for line in  mfile.readlines():
      line = line.rstrip()
      res.append(tuple(line.split()))
    res.sort(key=lambda x:x[1])   # sort by the gene name
    print(header)
    for m in res:
      print(','.join(m))
  sys.stdout = backup


class rnakdb:
  def __init__(self, dbfile):
    self.dbfile = dbfile
  def connection()
    self.conn = sqlite3.connect(dbfile)




def generaterankfile(dbfile, countfile, mageckolib, writefile):
  import sqlite3
  if os.path.exists(dbfile):
    os.remove(dbfile)

  conn = sqlite3.connect(dbfile)
  curs = conn.cursor()
  tblcmd = 'create table magecko_count(sgRNA TEXT NOT NULL, GENE TEXT NOT NULL, R1 INT NOT NULL, R2 INT NOT NULL)'
  curs.execute(tblcmd)
  tblcmd = 'create table magecko_lib(sgRNA TEXT NOT NULL, SEQ TEXT NOT NULL, GENE INT NOT NULL)'
  curs.execute(tblcmd)
  with open(countfile) as mfile:
    header = mfile.readline()
    for line in  mfile.readlines():
      myrecord = line.rstrip().split()
      curs.execute('insert into magecko_count values(?, ?, ?, ?)', myrecord)
    conn.commit()
  with open(mageckolib) as libf:
    for line in  libf.readlines():
      myrecord = line.rstrip().split(",")
      curs.execute('insert into magecko_lib values(?, ?, ?)', myrecord)
    conn.commit()
  createindex = "create index index_magecko_lib on magecko_lib(sgRNA)"
  curs.execute(createindex)
  #weite the result
  sql = "select DetailG.gene, DetailG.GroupNUM, GroupG.GroupTotal, DetailG.ConcatR1R2 "
  sql += "from ( "
  sql += 'select gene, count(*) as GroupNum, GROUP_CONCAT(R1+R2, ";") AS ConcatR1R2 from magecko_count '
  sql += 'where (R1+R2) > 0 group by gene ) AS DetailG '
  sql += ', '
  sql += '(select gene, count(*) as GroupTotal from magecko_count group by gene )  AS GroupG '
  sql += 'where DetailG.gene = GroupG.gene order by DetailG.GroupNUM DESC'
  curs.execute(sql)
  with open(writefile, 'w') as rankfile:
    header = ["gene", "GroupNum","GroupTotal", "ConcatR1R2"]
    rankfile.wirte(','.join(header) + "\n")
    for row in curs.fetchall():
      result = "%s,%s,%s,%s\n" % (row)
      rankfile.write(result)



if __name__ == '__main__':
  if False:
    sortgenefile("./test.gene","./test.gene.sort")
    print("hello in colose")
  else:
    print('Test sqlitedb')
    generaterankfile("./testdb", "./test.gene", "./testlib", "./test.rank")
